# Makefile.in generated by automake 1.15 from Makefile.am.
# examples/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



### choose C++ compiler
#CXX	= mpicxx -ggdb3 -Wall -Wextra -O3 -mavx -ffast-math -funroll-loops -fopenmp # GCC
#CXX	= mpicxx -ggdb3 -Wall -Wextra -O3 -mavx -Wa,-q -ffast-math -funroll-loops -fopenmp # GCC (OS X)
#CXX	= CC -ggdb3 -Wall -Wextra -O3 -mavx -ffast-math -funroll-loops -fopenmp -dynamic # GCC (Cray)
#CXX	= mpicxx -xHOST -Wall -O3 -funroll-loops -finline-functions -ansi-alias -openmp # Intel MPI
#CXX	= icpc -Wall -xHOST -O3 -funroll-loops -finline-functions -ansi-alias -openmp -I/usr/include/x86_64-linux-gnu/c++/4.8 # Intel
#CXX	= CC -Wall -O3 -funroll-loops -finline-functions -ansi-alias -openmp -dynamic # Intel (Cray)
#CXX	= icpc -Wall -mmic -O3 -L/opt/intel/tbb/lib/mic -lpthread # Intel MIC
#CXX	= mpic++ -Wall -mmic -O3 -L/opt/apps/intel/13/composer_xe_2013.2.146/tbb/lib/mic # Stampede
#CXX	= mpiFCCpx -Kfast,openmp # K computer / FX10 (cross compiler)
#CXX	= mpiFCC -Kfast,openmp # K computer / FX10 (interactive)
#CXX	= tau_cxx.sh # TAU compiler instrumentation

### choose fortran compiler
#FC = mpif90 -ggdb3 -O3 -ffast-math -funroll-loops -cpp # -lmpi_cxx # gfortran
#FC = ftn -ggdb3 -O3 -ffast-math -funroll-loops -cpp # -lmpi_cxx # gfortran (Cray)
#FC = mpif90 -O3 -xHOST -funroll-loops -finline-functions -ansi-alias -cpp -openmp # Intel
#FC = ftn -O3 -funroll-loops -finline-functions -ansi-alias -cpp -openmp # Intel (Cray)


am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/exafmm
pkgincludedir = $(includedir)/exafmm
pkglibdir = $(libdir)/exafmm
pkglibexecdir = $(libexecdir)/exafmm
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-apple-darwin14.5.0
host_triplet = x86_64-apple-darwin14.5.0

### Floating point precision
#am__append_1 = -DFP64

### SIMD flags
am__append_2 = -DUSE_SIMD
#am__append_3 = $(AVX_CXXFLAGS) # Use AVX intrinsics
#am__append_4 = $(SSE3_CXXFLAGS) # Use SSE3 intrinsics
#am__append_5 = $(NEON_CXXFLAGS) # Use Neon intrinsics

# Kahan summation
#am__append_6 = -DKAHAN

# Use weights for partitioning
#am__append_7 = -DUSE_WEIGHT
#AM_CXXFLAGS	+= -DCOUNT_KERNEL # Count number of kernel calls to P2P and M2L (slows down execution)
#AM_CXXFLAGS	+= -DCOUNT_LIST # Count size of P2P and M2L interaction lists per cell (slows down execution)

### Thread libraries
am__append_8 = -ltbb
#am__append_9 = -lcilkrts
bin_PROGRAMS = laplace_cartesian$(EXEEXT) laplace_spherical$(EXEEXT) \
	tree$(EXEEXT) laplace_cartesian_kernel$(EXEEXT) \
	laplace_spherical_kernel$(EXEEXT) $(am__EXEEXT_1)
#am__append_10 = laplace_cartesian_mpi laplace_spherical_mpi ewald_mpi
subdir = examples
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/acx_mpi.m4 \
	$(top_srcdir)/m4/ax_cc_maxopt.m4 \
	$(top_srcdir)/m4/ax_check_compiler_flags.m4 \
	$(top_srcdir)/m4/ax_compiler_vendor.m4 \
	$(top_srcdir)/m4/ax_cxx_maxopt.m4 \
	$(top_srcdir)/m4/ax_f77_maxopt.m4 \
	$(top_srcdir)/m4/ax_gcc_archflag.m4 \
	$(top_srcdir)/m4/ax_gcc_x86_cpuid.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
#am__EXEEXT_1 = laplace_cartesian_mpi$(EXEEXT) \
#	laplace_spherical_mpi$(EXEEXT) ewald_mpi$(EXEEXT)
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am__ewald_mpi_SOURCES_DIST = ewald.cxx \
	../kernels/LaplaceSphericalCPU.cxx \
	../kernels/LaplaceP2PCPU.cxx
am__dirstamp = $(am__leading_dot)dirstamp
#am_ewald_mpi_OBJECTS = ewald_mpi-ewald.$(OBJEXT) \
#	../kernels/ewald_mpi-LaplaceSphericalCPU.$(OBJEXT) \
#	../kernels/ewald_mpi-LaplaceP2PCPU.$(OBJEXT)
ewald_mpi_OBJECTS = $(am_ewald_mpi_OBJECTS)
ewald_mpi_LDADD = $(LDADD)
am_laplace_cartesian_OBJECTS = laplace_cartesian-fmm.$(OBJEXT) \
	../kernels/laplace_cartesian-LaplaceCartesianCPU.$(OBJEXT) \
	../kernels/laplace_cartesian-LaplaceP2PCPU.$(OBJEXT)
laplace_cartesian_OBJECTS = $(am_laplace_cartesian_OBJECTS)
laplace_cartesian_LDADD = $(LDADD)
am_laplace_cartesian_kernel_OBJECTS =  \
	laplace_cartesian_kernel-kernel.$(OBJEXT) \
	../kernels/laplace_cartesian_kernel-LaplaceCartesianCPU.$(OBJEXT) \
	../kernels/laplace_cartesian_kernel-LaplaceP2PCPU.$(OBJEXT)
laplace_cartesian_kernel_OBJECTS =  \
	$(am_laplace_cartesian_kernel_OBJECTS)
laplace_cartesian_kernel_LDADD = $(LDADD)
am__laplace_cartesian_mpi_SOURCES_DIST = fmm_mpi.cxx \
	../kernels/LaplaceCartesianCPU.cxx \
	../kernels/LaplaceP2PCPU.cxx
#am_laplace_cartesian_mpi_OBJECTS =  \
#	laplace_cartesian_mpi-fmm_mpi.$(OBJEXT) \
#	../kernels/laplace_cartesian_mpi-LaplaceCartesianCPU.$(OBJEXT) \
#	../kernels/laplace_cartesian_mpi-LaplaceP2PCPU.$(OBJEXT)
laplace_cartesian_mpi_OBJECTS = $(am_laplace_cartesian_mpi_OBJECTS)
laplace_cartesian_mpi_LDADD = $(LDADD)
am_laplace_spherical_OBJECTS = laplace_spherical-fmm.$(OBJEXT) \
	../kernels/laplace_spherical-LaplaceSphericalCPU.$(OBJEXT) \
	../kernels/laplace_spherical-LaplaceP2PCPU.$(OBJEXT)
laplace_spherical_OBJECTS = $(am_laplace_spherical_OBJECTS)
laplace_spherical_LDADD = $(LDADD)
am_laplace_spherical_kernel_OBJECTS =  \
	laplace_spherical_kernel-kernel.$(OBJEXT) \
	../kernels/laplace_spherical_kernel-LaplaceSphericalCPU.$(OBJEXT) \
	../kernels/laplace_spherical_kernel-LaplaceP2PCPU.$(OBJEXT)
laplace_spherical_kernel_OBJECTS =  \
	$(am_laplace_spherical_kernel_OBJECTS)
laplace_spherical_kernel_LDADD = $(LDADD)
am__laplace_spherical_mpi_SOURCES_DIST = fmm_mpi.cxx \
	../kernels/LaplaceSphericalCPU.cxx \
	../kernels/LaplaceP2PCPU.cxx
#am_laplace_spherical_mpi_OBJECTS =  \
#	laplace_spherical_mpi-fmm_mpi.$(OBJEXT) \
#	../kernels/laplace_spherical_mpi-LaplaceSphericalCPU.$(OBJEXT) \
#	../kernels/laplace_spherical_mpi-LaplaceP2PCPU.$(OBJEXT)
laplace_spherical_mpi_OBJECTS = $(am_laplace_spherical_mpi_OBJECTS)
laplace_spherical_mpi_LDADD = $(LDADD)
am_tree_OBJECTS = tree-tree.$(OBJEXT)
tree_OBJECTS = $(am_tree_OBJECTS)
tree_LDADD = $(LDADD)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/build-aux/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(ewald_mpi_SOURCES) $(laplace_cartesian_SOURCES) \
	$(laplace_cartesian_kernel_SOURCES) \
	$(laplace_cartesian_mpi_SOURCES) $(laplace_spherical_SOURCES) \
	$(laplace_spherical_kernel_SOURCES) \
	$(laplace_spherical_mpi_SOURCES) $(tree_SOURCES)
DIST_SOURCES = $(am__ewald_mpi_SOURCES_DIST) \
	$(laplace_cartesian_SOURCES) \
	$(laplace_cartesian_kernel_SOURCES) \
	$(am__laplace_cartesian_mpi_SOURCES_DIST) \
	$(laplace_spherical_SOURCES) \
	$(laplace_spherical_kernel_SOURCES) \
	$(am__laplace_spherical_mpi_SOURCES_DIST) $(tree_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/../Makefile.am.include \
	$(srcdir)/Makefile.in $(top_srcdir)/build-aux/depcomp
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /Users/yokotar/iCloud/sourcetree/exafmm/build-aux/missing aclocal-1.15
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AUTOCONF = ${SHELL} /Users/yokotar/iCloud/sourcetree/exafmm/build-aux/missing autoconf
AUTOHEADER = ${SHELL} /Users/yokotar/iCloud/sourcetree/exafmm/build-aux/missing autoheader
AUTOMAKE = ${SHELL} /Users/yokotar/iCloud/sourcetree/exafmm/build-aux/missing automake-1.15
AVX_CXXFLAGS = 
AWK = awk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -O3 -fomit-frame-pointer -mtune=native -fstrict-aliasing -fno-schedule-insns -ffast-math -ffast-math
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -O3 -fstrict-aliasing -mtune=native
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EXEEXT = 
F77 = gfortran
FFLAGS = -O3 -fomit-frame-pointer -malign-double -fstrict-aliasing -ffast-math -mtune=native
INSTALL = /opt/local/bin/ginstall -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS =  $(am__append_8) $(am__append_9)
LTLIBOBJS = 
MAKEINFO = ${SHELL} /Users/yokotar/iCloud/sourcetree/exafmm/build-aux/missing makeinfo
MKDIR_P = /opt/local/bin/gmkdir -p
MPICC = 
MPICXX = 
MPIF77 = 
MPILIBS = 
MPIRUN = 
NEON_CXXFLAGS = 
OBJEXT = o
PACKAGE = exafmm
PACKAGE_BUGREPORT = 
PACKAGE_NAME = exaFMM
PACKAGE_STRING = exaFMM 1.0
PACKAGE_TARNAME = exafmm
PACKAGE_URL = 
PACKAGE_VERSION = 1.0
PATH_SEPARATOR = :
PRECISION = s
PRTDIAG = 
SET_MAKE = 
SHELL = /bin/sh
SSE3_CXXFLAGS = 
STRIP = 
VERSION = 1.0
abs_builddir = /Users/yokotar/iCloud/sourcetree/exafmm/examples
abs_srcdir = /Users/yokotar/iCloud/sourcetree/exafmm/examples
abs_top_builddir = /Users/yokotar/iCloud/sourcetree/exafmm
abs_top_srcdir = /Users/yokotar/iCloud/sourcetree/exafmm
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = gfortran
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-apple-darwin14.5.0
build_alias = 
build_cpu = x86_64
build_os = darwin14.5.0
build_vendor = apple
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-apple-darwin14.5.0
host_alias = 
host_cpu = x86_64
host_os = darwin14.5.0
host_vendor = apple
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /Users/yokotar/iCloud/sourcetree/exafmm/build-aux/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..

### Base flags

### Debugging flags

#AM_CXXFLAGS += -DIneJ # Different target and source points
AM_CXXFLAGS = $(am__append_3) $(am__append_4) $(am__append_5) -DASSERT \
	-DDIRECT # Compare with direct summation
AM_CPPFLAGS = -I../include -I../uniform $(am__append_1) \
	$(am__append_2) $(am__append_6) $(am__append_7)
#AM_CXXFLAGS	+= -DWITH_MTHREAD -lmyth-native # MassiveThreads is available from http://code.google.com/p/massivethreads/
#AM_CXXFLAGS	+= -DWITH_QTHREAD -lqthread # Qthread is available from https://code.google.com/p/qthreads/
#AM_CXXFLAGS	+= -DWITH_OPENMP # OpenMP is included in most modern compilers

### DAG Recorder flags : DAG Recorder is part of MassiveThreads available from http://code.google.com/p/massivethreads/
#AM_CXXFLAGS	+= -DDAG_RECORDER=2 -ldr

### PAPI flags : set environment value to (export EXAFMM_PAPI_EVENTS="PAPI_L2_DCM,PAPI_L2_DCA,PAPI_TLB_DM") or something else
#AM_CXXFLAGS	+= -DPAPI -lpapi

### Trace flags : This tracing tool is part of ExaFMM
#AM_CXXFLAGS	+= -DTRACE

### Tree building flags
#AM_CXXFLAGS	+= -DSAKURA -lsakura # Sakura is a library for fast tree building using Cilk
AM_MAKEFLAGS = -s
laplace_cartesian_SOURCES = fmm.cxx ../kernels/LaplaceCartesianCPU.cxx ../kernels/LaplaceP2PCPU.cxx
laplace_cartesian_CPPFLAGS = $(AM_CPPFLAGS) -DLaplace -DCartesian -DMASS -DEXPANSION=4
laplace_spherical_SOURCES = fmm.cxx ../kernels/LaplaceSphericalCPU.cxx ../kernels/LaplaceP2PCPU.cxx
laplace_spherical_CPPFLAGS = $(AM_CPPFLAGS) -DLaplace -DSpherical -DEXPANSION=10
tree_SOURCES = tree.cxx
tree_CPPFLAGS = $(laplace_cartesian_CPPFLAGS)
laplace_cartesian_kernel_SOURCES = kernel.cxx ../kernels/LaplaceCartesianCPU.cxx ../kernels/LaplaceP2PCPU.cxx
laplace_cartesian_kernel_CPPFLAGS = $(laplace_cartesian_CPPFLAGS)
laplace_spherical_kernel_SOURCES = kernel.cxx ../kernels/LaplaceSphericalCPU.cxx ../kernels/LaplaceP2PCPU.cxx
laplace_spherical_kernel_CPPFLAGS = $(laplace_spherical_CPPFLAGS)
#laplace_cartesian_mpi_SOURCES = fmm_mpi.cxx ../kernels/LaplaceCartesianCPU.cxx ../kernels/LaplaceP2PCPU.cxx
#laplace_cartesian_mpi_CPPFLAGS = $(laplace_cartesian_CPPFLAGS)
#laplace_spherical_mpi_SOURCES = fmm_mpi.cxx ../kernels/LaplaceSphericalCPU.cxx ../kernels/LaplaceP2PCPU.cxx
#laplace_spherical_mpi_CPPFLAGS = $(laplace_spherical_CPPFLAGS)
#ewald_mpi_SOURCES = ewald.cxx ../kernels/LaplaceSphericalCPU.cxx ../kernels/LaplaceP2PCPU.cxx
#ewald_mpi_CPPFLAGS = $(laplace_spherical_CPPFLAGS)
all: all-am

.SUFFIXES:
.SUFFIXES: .cxx .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(srcdir)/../Makefile.am.include $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign examples/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign examples/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(srcdir)/../Makefile.am.include $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
../kernels/$(am__dirstamp):
	@$(MKDIR_P) ../kernels
	@: > ../kernels/$(am__dirstamp)
../kernels/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) ../kernels/$(DEPDIR)
	@: > ../kernels/$(DEPDIR)/$(am__dirstamp)
../kernels/ewald_mpi-LaplaceSphericalCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)
../kernels/ewald_mpi-LaplaceP2PCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)

ewald_mpi$(EXEEXT): $(ewald_mpi_OBJECTS) $(ewald_mpi_DEPENDENCIES) $(EXTRA_ewald_mpi_DEPENDENCIES) 
	@rm -f ewald_mpi$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(ewald_mpi_OBJECTS) $(ewald_mpi_LDADD) $(LIBS)
../kernels/laplace_cartesian-LaplaceCartesianCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)
../kernels/laplace_cartesian-LaplaceP2PCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)

laplace_cartesian$(EXEEXT): $(laplace_cartesian_OBJECTS) $(laplace_cartesian_DEPENDENCIES) $(EXTRA_laplace_cartesian_DEPENDENCIES) 
	@rm -f laplace_cartesian$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(laplace_cartesian_OBJECTS) $(laplace_cartesian_LDADD) $(LIBS)
../kernels/laplace_cartesian_kernel-LaplaceCartesianCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)
../kernels/laplace_cartesian_kernel-LaplaceP2PCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)

laplace_cartesian_kernel$(EXEEXT): $(laplace_cartesian_kernel_OBJECTS) $(laplace_cartesian_kernel_DEPENDENCIES) $(EXTRA_laplace_cartesian_kernel_DEPENDENCIES) 
	@rm -f laplace_cartesian_kernel$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(laplace_cartesian_kernel_OBJECTS) $(laplace_cartesian_kernel_LDADD) $(LIBS)
../kernels/laplace_cartesian_mpi-LaplaceCartesianCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)
../kernels/laplace_cartesian_mpi-LaplaceP2PCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)

laplace_cartesian_mpi$(EXEEXT): $(laplace_cartesian_mpi_OBJECTS) $(laplace_cartesian_mpi_DEPENDENCIES) $(EXTRA_laplace_cartesian_mpi_DEPENDENCIES) 
	@rm -f laplace_cartesian_mpi$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(laplace_cartesian_mpi_OBJECTS) $(laplace_cartesian_mpi_LDADD) $(LIBS)
../kernels/laplace_spherical-LaplaceSphericalCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)
../kernels/laplace_spherical-LaplaceP2PCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)

laplace_spherical$(EXEEXT): $(laplace_spherical_OBJECTS) $(laplace_spherical_DEPENDENCIES) $(EXTRA_laplace_spherical_DEPENDENCIES) 
	@rm -f laplace_spherical$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(laplace_spherical_OBJECTS) $(laplace_spherical_LDADD) $(LIBS)
../kernels/laplace_spherical_kernel-LaplaceSphericalCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)
../kernels/laplace_spherical_kernel-LaplaceP2PCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)

laplace_spherical_kernel$(EXEEXT): $(laplace_spherical_kernel_OBJECTS) $(laplace_spherical_kernel_DEPENDENCIES) $(EXTRA_laplace_spherical_kernel_DEPENDENCIES) 
	@rm -f laplace_spherical_kernel$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(laplace_spherical_kernel_OBJECTS) $(laplace_spherical_kernel_LDADD) $(LIBS)
../kernels/laplace_spherical_mpi-LaplaceSphericalCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)
../kernels/laplace_spherical_mpi-LaplaceP2PCPU.$(OBJEXT):  \
	../kernels/$(am__dirstamp) \
	../kernels/$(DEPDIR)/$(am__dirstamp)

laplace_spherical_mpi$(EXEEXT): $(laplace_spherical_mpi_OBJECTS) $(laplace_spherical_mpi_DEPENDENCIES) $(EXTRA_laplace_spherical_mpi_DEPENDENCIES) 
	@rm -f laplace_spherical_mpi$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(laplace_spherical_mpi_OBJECTS) $(laplace_spherical_mpi_LDADD) $(LIBS)

tree$(EXEEXT): $(tree_OBJECTS) $(tree_DEPENDENCIES) $(EXTRA_tree_DEPENDENCIES) 
	@rm -f tree$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(tree_OBJECTS) $(tree_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)
	-rm -f ../kernels/*.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ../kernels/$(DEPDIR)/ewald_mpi-LaplaceP2PCPU.Po
include ../kernels/$(DEPDIR)/ewald_mpi-LaplaceSphericalCPU.Po
include ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceCartesianCPU.Po
include ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceP2PCPU.Po
include ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceCartesianCPU.Po
include ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceP2PCPU.Po
include ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceCartesianCPU.Po
include ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceP2PCPU.Po
include ../kernels/$(DEPDIR)/laplace_spherical-LaplaceP2PCPU.Po
include ../kernels/$(DEPDIR)/laplace_spherical-LaplaceSphericalCPU.Po
include ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceP2PCPU.Po
include ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceSphericalCPU.Po
include ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceP2PCPU.Po
include ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceSphericalCPU.Po
include ./$(DEPDIR)/ewald_mpi-ewald.Po
include ./$(DEPDIR)/laplace_cartesian-fmm.Po
include ./$(DEPDIR)/laplace_cartesian_kernel-kernel.Po
include ./$(DEPDIR)/laplace_cartesian_mpi-fmm_mpi.Po
include ./$(DEPDIR)/laplace_spherical-fmm.Po
include ./$(DEPDIR)/laplace_spherical_kernel-kernel.Po
include ./$(DEPDIR)/laplace_spherical_mpi-fmm_mpi.Po
include ./$(DEPDIR)/tree-tree.Po

.cxx.o:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cxx.obj:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

ewald_mpi-ewald.o: ewald.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ewald_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ewald_mpi-ewald.o -MD -MP -MF $(DEPDIR)/ewald_mpi-ewald.Tpo -c -o ewald_mpi-ewald.o `test -f 'ewald.cxx' || echo '$(srcdir)/'`ewald.cxx
	$(AM_V_at)$(am__mv) $(DEPDIR)/ewald_mpi-ewald.Tpo $(DEPDIR)/ewald_mpi-ewald.Po
#	$(AM_V_CXX)source='ewald.cxx' object='ewald_mpi-ewald.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ewald_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ewald_mpi-ewald.o `test -f 'ewald.cxx' || echo '$(srcdir)/'`ewald.cxx

ewald_mpi-ewald.obj: ewald.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ewald_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ewald_mpi-ewald.obj -MD -MP -MF $(DEPDIR)/ewald_mpi-ewald.Tpo -c -o ewald_mpi-ewald.obj `if test -f 'ewald.cxx'; then $(CYGPATH_W) 'ewald.cxx'; else $(CYGPATH_W) '$(srcdir)/ewald.cxx'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/ewald_mpi-ewald.Tpo $(DEPDIR)/ewald_mpi-ewald.Po
#	$(AM_V_CXX)source='ewald.cxx' object='ewald_mpi-ewald.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ewald_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ewald_mpi-ewald.obj `if test -f 'ewald.cxx'; then $(CYGPATH_W) 'ewald.cxx'; else $(CYGPATH_W) '$(srcdir)/ewald.cxx'; fi`

../kernels/ewald_mpi-LaplaceSphericalCPU.o: ../kernels/LaplaceSphericalCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ewald_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/ewald_mpi-LaplaceSphericalCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/ewald_mpi-LaplaceSphericalCPU.Tpo -c -o ../kernels/ewald_mpi-LaplaceSphericalCPU.o `test -f '../kernels/LaplaceSphericalCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceSphericalCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/ewald_mpi-LaplaceSphericalCPU.Tpo ../kernels/$(DEPDIR)/ewald_mpi-LaplaceSphericalCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceSphericalCPU.cxx' object='../kernels/ewald_mpi-LaplaceSphericalCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ewald_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/ewald_mpi-LaplaceSphericalCPU.o `test -f '../kernels/LaplaceSphericalCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceSphericalCPU.cxx

../kernels/ewald_mpi-LaplaceSphericalCPU.obj: ../kernels/LaplaceSphericalCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ewald_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/ewald_mpi-LaplaceSphericalCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/ewald_mpi-LaplaceSphericalCPU.Tpo -c -o ../kernels/ewald_mpi-LaplaceSphericalCPU.obj `if test -f '../kernels/LaplaceSphericalCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceSphericalCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceSphericalCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/ewald_mpi-LaplaceSphericalCPU.Tpo ../kernels/$(DEPDIR)/ewald_mpi-LaplaceSphericalCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceSphericalCPU.cxx' object='../kernels/ewald_mpi-LaplaceSphericalCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ewald_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/ewald_mpi-LaplaceSphericalCPU.obj `if test -f '../kernels/LaplaceSphericalCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceSphericalCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceSphericalCPU.cxx'; fi`

../kernels/ewald_mpi-LaplaceP2PCPU.o: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ewald_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/ewald_mpi-LaplaceP2PCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/ewald_mpi-LaplaceP2PCPU.Tpo -c -o ../kernels/ewald_mpi-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/ewald_mpi-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/ewald_mpi-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/ewald_mpi-LaplaceP2PCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ewald_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/ewald_mpi-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx

../kernels/ewald_mpi-LaplaceP2PCPU.obj: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ewald_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/ewald_mpi-LaplaceP2PCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/ewald_mpi-LaplaceP2PCPU.Tpo -c -o ../kernels/ewald_mpi-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/ewald_mpi-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/ewald_mpi-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/ewald_mpi-LaplaceP2PCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ewald_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/ewald_mpi-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`

laplace_cartesian-fmm.o: fmm.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT laplace_cartesian-fmm.o -MD -MP -MF $(DEPDIR)/laplace_cartesian-fmm.Tpo -c -o laplace_cartesian-fmm.o `test -f 'fmm.cxx' || echo '$(srcdir)/'`fmm.cxx
	$(AM_V_at)$(am__mv) $(DEPDIR)/laplace_cartesian-fmm.Tpo $(DEPDIR)/laplace_cartesian-fmm.Po
#	$(AM_V_CXX)source='fmm.cxx' object='laplace_cartesian-fmm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o laplace_cartesian-fmm.o `test -f 'fmm.cxx' || echo '$(srcdir)/'`fmm.cxx

laplace_cartesian-fmm.obj: fmm.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT laplace_cartesian-fmm.obj -MD -MP -MF $(DEPDIR)/laplace_cartesian-fmm.Tpo -c -o laplace_cartesian-fmm.obj `if test -f 'fmm.cxx'; then $(CYGPATH_W) 'fmm.cxx'; else $(CYGPATH_W) '$(srcdir)/fmm.cxx'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/laplace_cartesian-fmm.Tpo $(DEPDIR)/laplace_cartesian-fmm.Po
#	$(AM_V_CXX)source='fmm.cxx' object='laplace_cartesian-fmm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o laplace_cartesian-fmm.obj `if test -f 'fmm.cxx'; then $(CYGPATH_W) 'fmm.cxx'; else $(CYGPATH_W) '$(srcdir)/fmm.cxx'; fi`

../kernels/laplace_cartesian-LaplaceCartesianCPU.o: ../kernels/LaplaceCartesianCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_cartesian-LaplaceCartesianCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceCartesianCPU.Tpo -c -o ../kernels/laplace_cartesian-LaplaceCartesianCPU.o `test -f '../kernels/LaplaceCartesianCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceCartesianCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceCartesianCPU.Tpo ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceCartesianCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceCartesianCPU.cxx' object='../kernels/laplace_cartesian-LaplaceCartesianCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_cartesian-LaplaceCartesianCPU.o `test -f '../kernels/LaplaceCartesianCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceCartesianCPU.cxx

../kernels/laplace_cartesian-LaplaceCartesianCPU.obj: ../kernels/LaplaceCartesianCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_cartesian-LaplaceCartesianCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceCartesianCPU.Tpo -c -o ../kernels/laplace_cartesian-LaplaceCartesianCPU.obj `if test -f '../kernels/LaplaceCartesianCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceCartesianCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceCartesianCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceCartesianCPU.Tpo ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceCartesianCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceCartesianCPU.cxx' object='../kernels/laplace_cartesian-LaplaceCartesianCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_cartesian-LaplaceCartesianCPU.obj `if test -f '../kernels/LaplaceCartesianCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceCartesianCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceCartesianCPU.cxx'; fi`

../kernels/laplace_cartesian-LaplaceP2PCPU.o: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_cartesian-LaplaceP2PCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceP2PCPU.Tpo -c -o ../kernels/laplace_cartesian-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/laplace_cartesian-LaplaceP2PCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_cartesian-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx

../kernels/laplace_cartesian-LaplaceP2PCPU.obj: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_cartesian-LaplaceP2PCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceP2PCPU.Tpo -c -o ../kernels/laplace_cartesian-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/laplace_cartesian-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/laplace_cartesian-LaplaceP2PCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_cartesian-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`

laplace_cartesian_kernel-kernel.o: kernel.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT laplace_cartesian_kernel-kernel.o -MD -MP -MF $(DEPDIR)/laplace_cartesian_kernel-kernel.Tpo -c -o laplace_cartesian_kernel-kernel.o `test -f 'kernel.cxx' || echo '$(srcdir)/'`kernel.cxx
	$(AM_V_at)$(am__mv) $(DEPDIR)/laplace_cartesian_kernel-kernel.Tpo $(DEPDIR)/laplace_cartesian_kernel-kernel.Po
#	$(AM_V_CXX)source='kernel.cxx' object='laplace_cartesian_kernel-kernel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o laplace_cartesian_kernel-kernel.o `test -f 'kernel.cxx' || echo '$(srcdir)/'`kernel.cxx

laplace_cartesian_kernel-kernel.obj: kernel.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT laplace_cartesian_kernel-kernel.obj -MD -MP -MF $(DEPDIR)/laplace_cartesian_kernel-kernel.Tpo -c -o laplace_cartesian_kernel-kernel.obj `if test -f 'kernel.cxx'; then $(CYGPATH_W) 'kernel.cxx'; else $(CYGPATH_W) '$(srcdir)/kernel.cxx'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/laplace_cartesian_kernel-kernel.Tpo $(DEPDIR)/laplace_cartesian_kernel-kernel.Po
#	$(AM_V_CXX)source='kernel.cxx' object='laplace_cartesian_kernel-kernel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o laplace_cartesian_kernel-kernel.obj `if test -f 'kernel.cxx'; then $(CYGPATH_W) 'kernel.cxx'; else $(CYGPATH_W) '$(srcdir)/kernel.cxx'; fi`

../kernels/laplace_cartesian_kernel-LaplaceCartesianCPU.o: ../kernels/LaplaceCartesianCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_cartesian_kernel-LaplaceCartesianCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceCartesianCPU.Tpo -c -o ../kernels/laplace_cartesian_kernel-LaplaceCartesianCPU.o `test -f '../kernels/LaplaceCartesianCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceCartesianCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceCartesianCPU.Tpo ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceCartesianCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceCartesianCPU.cxx' object='../kernels/laplace_cartesian_kernel-LaplaceCartesianCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_cartesian_kernel-LaplaceCartesianCPU.o `test -f '../kernels/LaplaceCartesianCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceCartesianCPU.cxx

../kernels/laplace_cartesian_kernel-LaplaceCartesianCPU.obj: ../kernels/LaplaceCartesianCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_cartesian_kernel-LaplaceCartesianCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceCartesianCPU.Tpo -c -o ../kernels/laplace_cartesian_kernel-LaplaceCartesianCPU.obj `if test -f '../kernels/LaplaceCartesianCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceCartesianCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceCartesianCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceCartesianCPU.Tpo ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceCartesianCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceCartesianCPU.cxx' object='../kernels/laplace_cartesian_kernel-LaplaceCartesianCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_cartesian_kernel-LaplaceCartesianCPU.obj `if test -f '../kernels/LaplaceCartesianCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceCartesianCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceCartesianCPU.cxx'; fi`

../kernels/laplace_cartesian_kernel-LaplaceP2PCPU.o: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_cartesian_kernel-LaplaceP2PCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceP2PCPU.Tpo -c -o ../kernels/laplace_cartesian_kernel-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/laplace_cartesian_kernel-LaplaceP2PCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_cartesian_kernel-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx

../kernels/laplace_cartesian_kernel-LaplaceP2PCPU.obj: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_cartesian_kernel-LaplaceP2PCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceP2PCPU.Tpo -c -o ../kernels/laplace_cartesian_kernel-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/laplace_cartesian_kernel-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/laplace_cartesian_kernel-LaplaceP2PCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_cartesian_kernel-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`

laplace_cartesian_mpi-fmm_mpi.o: fmm_mpi.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT laplace_cartesian_mpi-fmm_mpi.o -MD -MP -MF $(DEPDIR)/laplace_cartesian_mpi-fmm_mpi.Tpo -c -o laplace_cartesian_mpi-fmm_mpi.o `test -f 'fmm_mpi.cxx' || echo '$(srcdir)/'`fmm_mpi.cxx
	$(AM_V_at)$(am__mv) $(DEPDIR)/laplace_cartesian_mpi-fmm_mpi.Tpo $(DEPDIR)/laplace_cartesian_mpi-fmm_mpi.Po
#	$(AM_V_CXX)source='fmm_mpi.cxx' object='laplace_cartesian_mpi-fmm_mpi.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o laplace_cartesian_mpi-fmm_mpi.o `test -f 'fmm_mpi.cxx' || echo '$(srcdir)/'`fmm_mpi.cxx

laplace_cartesian_mpi-fmm_mpi.obj: fmm_mpi.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT laplace_cartesian_mpi-fmm_mpi.obj -MD -MP -MF $(DEPDIR)/laplace_cartesian_mpi-fmm_mpi.Tpo -c -o laplace_cartesian_mpi-fmm_mpi.obj `if test -f 'fmm_mpi.cxx'; then $(CYGPATH_W) 'fmm_mpi.cxx'; else $(CYGPATH_W) '$(srcdir)/fmm_mpi.cxx'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/laplace_cartesian_mpi-fmm_mpi.Tpo $(DEPDIR)/laplace_cartesian_mpi-fmm_mpi.Po
#	$(AM_V_CXX)source='fmm_mpi.cxx' object='laplace_cartesian_mpi-fmm_mpi.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o laplace_cartesian_mpi-fmm_mpi.obj `if test -f 'fmm_mpi.cxx'; then $(CYGPATH_W) 'fmm_mpi.cxx'; else $(CYGPATH_W) '$(srcdir)/fmm_mpi.cxx'; fi`

../kernels/laplace_cartesian_mpi-LaplaceCartesianCPU.o: ../kernels/LaplaceCartesianCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_cartesian_mpi-LaplaceCartesianCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceCartesianCPU.Tpo -c -o ../kernels/laplace_cartesian_mpi-LaplaceCartesianCPU.o `test -f '../kernels/LaplaceCartesianCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceCartesianCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceCartesianCPU.Tpo ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceCartesianCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceCartesianCPU.cxx' object='../kernels/laplace_cartesian_mpi-LaplaceCartesianCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_cartesian_mpi-LaplaceCartesianCPU.o `test -f '../kernels/LaplaceCartesianCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceCartesianCPU.cxx

../kernels/laplace_cartesian_mpi-LaplaceCartesianCPU.obj: ../kernels/LaplaceCartesianCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_cartesian_mpi-LaplaceCartesianCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceCartesianCPU.Tpo -c -o ../kernels/laplace_cartesian_mpi-LaplaceCartesianCPU.obj `if test -f '../kernels/LaplaceCartesianCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceCartesianCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceCartesianCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceCartesianCPU.Tpo ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceCartesianCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceCartesianCPU.cxx' object='../kernels/laplace_cartesian_mpi-LaplaceCartesianCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_cartesian_mpi-LaplaceCartesianCPU.obj `if test -f '../kernels/LaplaceCartesianCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceCartesianCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceCartesianCPU.cxx'; fi`

../kernels/laplace_cartesian_mpi-LaplaceP2PCPU.o: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_cartesian_mpi-LaplaceP2PCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceP2PCPU.Tpo -c -o ../kernels/laplace_cartesian_mpi-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/laplace_cartesian_mpi-LaplaceP2PCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_cartesian_mpi-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx

../kernels/laplace_cartesian_mpi-LaplaceP2PCPU.obj: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_cartesian_mpi-LaplaceP2PCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceP2PCPU.Tpo -c -o ../kernels/laplace_cartesian_mpi-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/laplace_cartesian_mpi-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/laplace_cartesian_mpi-LaplaceP2PCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_cartesian_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_cartesian_mpi-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`

laplace_spherical-fmm.o: fmm.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT laplace_spherical-fmm.o -MD -MP -MF $(DEPDIR)/laplace_spherical-fmm.Tpo -c -o laplace_spherical-fmm.o `test -f 'fmm.cxx' || echo '$(srcdir)/'`fmm.cxx
	$(AM_V_at)$(am__mv) $(DEPDIR)/laplace_spherical-fmm.Tpo $(DEPDIR)/laplace_spherical-fmm.Po
#	$(AM_V_CXX)source='fmm.cxx' object='laplace_spherical-fmm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o laplace_spherical-fmm.o `test -f 'fmm.cxx' || echo '$(srcdir)/'`fmm.cxx

laplace_spherical-fmm.obj: fmm.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT laplace_spherical-fmm.obj -MD -MP -MF $(DEPDIR)/laplace_spherical-fmm.Tpo -c -o laplace_spherical-fmm.obj `if test -f 'fmm.cxx'; then $(CYGPATH_W) 'fmm.cxx'; else $(CYGPATH_W) '$(srcdir)/fmm.cxx'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/laplace_spherical-fmm.Tpo $(DEPDIR)/laplace_spherical-fmm.Po
#	$(AM_V_CXX)source='fmm.cxx' object='laplace_spherical-fmm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o laplace_spherical-fmm.obj `if test -f 'fmm.cxx'; then $(CYGPATH_W) 'fmm.cxx'; else $(CYGPATH_W) '$(srcdir)/fmm.cxx'; fi`

../kernels/laplace_spherical-LaplaceSphericalCPU.o: ../kernels/LaplaceSphericalCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_spherical-LaplaceSphericalCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/laplace_spherical-LaplaceSphericalCPU.Tpo -c -o ../kernels/laplace_spherical-LaplaceSphericalCPU.o `test -f '../kernels/LaplaceSphericalCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceSphericalCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_spherical-LaplaceSphericalCPU.Tpo ../kernels/$(DEPDIR)/laplace_spherical-LaplaceSphericalCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceSphericalCPU.cxx' object='../kernels/laplace_spherical-LaplaceSphericalCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_spherical-LaplaceSphericalCPU.o `test -f '../kernels/LaplaceSphericalCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceSphericalCPU.cxx

../kernels/laplace_spherical-LaplaceSphericalCPU.obj: ../kernels/LaplaceSphericalCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_spherical-LaplaceSphericalCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/laplace_spherical-LaplaceSphericalCPU.Tpo -c -o ../kernels/laplace_spherical-LaplaceSphericalCPU.obj `if test -f '../kernels/LaplaceSphericalCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceSphericalCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceSphericalCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_spherical-LaplaceSphericalCPU.Tpo ../kernels/$(DEPDIR)/laplace_spherical-LaplaceSphericalCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceSphericalCPU.cxx' object='../kernels/laplace_spherical-LaplaceSphericalCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_spherical-LaplaceSphericalCPU.obj `if test -f '../kernels/LaplaceSphericalCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceSphericalCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceSphericalCPU.cxx'; fi`

../kernels/laplace_spherical-LaplaceP2PCPU.o: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_spherical-LaplaceP2PCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/laplace_spherical-LaplaceP2PCPU.Tpo -c -o ../kernels/laplace_spherical-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_spherical-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/laplace_spherical-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/laplace_spherical-LaplaceP2PCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_spherical-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx

../kernels/laplace_spherical-LaplaceP2PCPU.obj: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_spherical-LaplaceP2PCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/laplace_spherical-LaplaceP2PCPU.Tpo -c -o ../kernels/laplace_spherical-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_spherical-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/laplace_spherical-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/laplace_spherical-LaplaceP2PCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_spherical-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`

laplace_spherical_kernel-kernel.o: kernel.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT laplace_spherical_kernel-kernel.o -MD -MP -MF $(DEPDIR)/laplace_spherical_kernel-kernel.Tpo -c -o laplace_spherical_kernel-kernel.o `test -f 'kernel.cxx' || echo '$(srcdir)/'`kernel.cxx
	$(AM_V_at)$(am__mv) $(DEPDIR)/laplace_spherical_kernel-kernel.Tpo $(DEPDIR)/laplace_spherical_kernel-kernel.Po
#	$(AM_V_CXX)source='kernel.cxx' object='laplace_spherical_kernel-kernel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o laplace_spherical_kernel-kernel.o `test -f 'kernel.cxx' || echo '$(srcdir)/'`kernel.cxx

laplace_spherical_kernel-kernel.obj: kernel.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT laplace_spherical_kernel-kernel.obj -MD -MP -MF $(DEPDIR)/laplace_spherical_kernel-kernel.Tpo -c -o laplace_spherical_kernel-kernel.obj `if test -f 'kernel.cxx'; then $(CYGPATH_W) 'kernel.cxx'; else $(CYGPATH_W) '$(srcdir)/kernel.cxx'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/laplace_spherical_kernel-kernel.Tpo $(DEPDIR)/laplace_spherical_kernel-kernel.Po
#	$(AM_V_CXX)source='kernel.cxx' object='laplace_spherical_kernel-kernel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o laplace_spherical_kernel-kernel.obj `if test -f 'kernel.cxx'; then $(CYGPATH_W) 'kernel.cxx'; else $(CYGPATH_W) '$(srcdir)/kernel.cxx'; fi`

../kernels/laplace_spherical_kernel-LaplaceSphericalCPU.o: ../kernels/LaplaceSphericalCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_spherical_kernel-LaplaceSphericalCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceSphericalCPU.Tpo -c -o ../kernels/laplace_spherical_kernel-LaplaceSphericalCPU.o `test -f '../kernels/LaplaceSphericalCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceSphericalCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceSphericalCPU.Tpo ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceSphericalCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceSphericalCPU.cxx' object='../kernels/laplace_spherical_kernel-LaplaceSphericalCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_spherical_kernel-LaplaceSphericalCPU.o `test -f '../kernels/LaplaceSphericalCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceSphericalCPU.cxx

../kernels/laplace_spherical_kernel-LaplaceSphericalCPU.obj: ../kernels/LaplaceSphericalCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_spherical_kernel-LaplaceSphericalCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceSphericalCPU.Tpo -c -o ../kernels/laplace_spherical_kernel-LaplaceSphericalCPU.obj `if test -f '../kernels/LaplaceSphericalCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceSphericalCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceSphericalCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceSphericalCPU.Tpo ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceSphericalCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceSphericalCPU.cxx' object='../kernels/laplace_spherical_kernel-LaplaceSphericalCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_spherical_kernel-LaplaceSphericalCPU.obj `if test -f '../kernels/LaplaceSphericalCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceSphericalCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceSphericalCPU.cxx'; fi`

../kernels/laplace_spherical_kernel-LaplaceP2PCPU.o: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_spherical_kernel-LaplaceP2PCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceP2PCPU.Tpo -c -o ../kernels/laplace_spherical_kernel-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/laplace_spherical_kernel-LaplaceP2PCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_spherical_kernel-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx

../kernels/laplace_spherical_kernel-LaplaceP2PCPU.obj: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_spherical_kernel-LaplaceP2PCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceP2PCPU.Tpo -c -o ../kernels/laplace_spherical_kernel-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/laplace_spherical_kernel-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/laplace_spherical_kernel-LaplaceP2PCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_kernel_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_spherical_kernel-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`

laplace_spherical_mpi-fmm_mpi.o: fmm_mpi.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT laplace_spherical_mpi-fmm_mpi.o -MD -MP -MF $(DEPDIR)/laplace_spherical_mpi-fmm_mpi.Tpo -c -o laplace_spherical_mpi-fmm_mpi.o `test -f 'fmm_mpi.cxx' || echo '$(srcdir)/'`fmm_mpi.cxx
	$(AM_V_at)$(am__mv) $(DEPDIR)/laplace_spherical_mpi-fmm_mpi.Tpo $(DEPDIR)/laplace_spherical_mpi-fmm_mpi.Po
#	$(AM_V_CXX)source='fmm_mpi.cxx' object='laplace_spherical_mpi-fmm_mpi.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o laplace_spherical_mpi-fmm_mpi.o `test -f 'fmm_mpi.cxx' || echo '$(srcdir)/'`fmm_mpi.cxx

laplace_spherical_mpi-fmm_mpi.obj: fmm_mpi.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT laplace_spherical_mpi-fmm_mpi.obj -MD -MP -MF $(DEPDIR)/laplace_spherical_mpi-fmm_mpi.Tpo -c -o laplace_spherical_mpi-fmm_mpi.obj `if test -f 'fmm_mpi.cxx'; then $(CYGPATH_W) 'fmm_mpi.cxx'; else $(CYGPATH_W) '$(srcdir)/fmm_mpi.cxx'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/laplace_spherical_mpi-fmm_mpi.Tpo $(DEPDIR)/laplace_spherical_mpi-fmm_mpi.Po
#	$(AM_V_CXX)source='fmm_mpi.cxx' object='laplace_spherical_mpi-fmm_mpi.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o laplace_spherical_mpi-fmm_mpi.obj `if test -f 'fmm_mpi.cxx'; then $(CYGPATH_W) 'fmm_mpi.cxx'; else $(CYGPATH_W) '$(srcdir)/fmm_mpi.cxx'; fi`

../kernels/laplace_spherical_mpi-LaplaceSphericalCPU.o: ../kernels/LaplaceSphericalCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_spherical_mpi-LaplaceSphericalCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceSphericalCPU.Tpo -c -o ../kernels/laplace_spherical_mpi-LaplaceSphericalCPU.o `test -f '../kernels/LaplaceSphericalCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceSphericalCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceSphericalCPU.Tpo ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceSphericalCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceSphericalCPU.cxx' object='../kernels/laplace_spherical_mpi-LaplaceSphericalCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_spherical_mpi-LaplaceSphericalCPU.o `test -f '../kernels/LaplaceSphericalCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceSphericalCPU.cxx

../kernels/laplace_spherical_mpi-LaplaceSphericalCPU.obj: ../kernels/LaplaceSphericalCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_spherical_mpi-LaplaceSphericalCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceSphericalCPU.Tpo -c -o ../kernels/laplace_spherical_mpi-LaplaceSphericalCPU.obj `if test -f '../kernels/LaplaceSphericalCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceSphericalCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceSphericalCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceSphericalCPU.Tpo ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceSphericalCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceSphericalCPU.cxx' object='../kernels/laplace_spherical_mpi-LaplaceSphericalCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_spherical_mpi-LaplaceSphericalCPU.obj `if test -f '../kernels/LaplaceSphericalCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceSphericalCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceSphericalCPU.cxx'; fi`

../kernels/laplace_spherical_mpi-LaplaceP2PCPU.o: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_spherical_mpi-LaplaceP2PCPU.o -MD -MP -MF ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceP2PCPU.Tpo -c -o ../kernels/laplace_spherical_mpi-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/laplace_spherical_mpi-LaplaceP2PCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_spherical_mpi-LaplaceP2PCPU.o `test -f '../kernels/LaplaceP2PCPU.cxx' || echo '$(srcdir)/'`../kernels/LaplaceP2PCPU.cxx

../kernels/laplace_spherical_mpi-LaplaceP2PCPU.obj: ../kernels/LaplaceP2PCPU.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ../kernels/laplace_spherical_mpi-LaplaceP2PCPU.obj -MD -MP -MF ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceP2PCPU.Tpo -c -o ../kernels/laplace_spherical_mpi-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`
	$(AM_V_at)$(am__mv) ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceP2PCPU.Tpo ../kernels/$(DEPDIR)/laplace_spherical_mpi-LaplaceP2PCPU.Po
#	$(AM_V_CXX)source='../kernels/LaplaceP2PCPU.cxx' object='../kernels/laplace_spherical_mpi-LaplaceP2PCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(laplace_spherical_mpi_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ../kernels/laplace_spherical_mpi-LaplaceP2PCPU.obj `if test -f '../kernels/LaplaceP2PCPU.cxx'; then $(CYGPATH_W) '../kernels/LaplaceP2PCPU.cxx'; else $(CYGPATH_W) '$(srcdir)/../kernels/LaplaceP2PCPU.cxx'; fi`

tree-tree.o: tree.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tree_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT tree-tree.o -MD -MP -MF $(DEPDIR)/tree-tree.Tpo -c -o tree-tree.o `test -f 'tree.cxx' || echo '$(srcdir)/'`tree.cxx
	$(AM_V_at)$(am__mv) $(DEPDIR)/tree-tree.Tpo $(DEPDIR)/tree-tree.Po
#	$(AM_V_CXX)source='tree.cxx' object='tree-tree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tree_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o tree-tree.o `test -f 'tree.cxx' || echo '$(srcdir)/'`tree.cxx

tree-tree.obj: tree.cxx
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tree_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT tree-tree.obj -MD -MP -MF $(DEPDIR)/tree-tree.Tpo -c -o tree-tree.obj `if test -f 'tree.cxx'; then $(CYGPATH_W) 'tree.cxx'; else $(CYGPATH_W) '$(srcdir)/tree.cxx'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/tree-tree.Tpo $(DEPDIR)/tree-tree.Po
#	$(AM_V_CXX)source='tree.cxx' object='tree-tree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(tree_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o tree-tree.obj `if test -f 'tree.cxx'; then $(CYGPATH_W) 'tree.cxx'; else $(CYGPATH_W) '$(srcdir)/tree.cxx'; fi`

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-rm -f ../kernels/$(DEPDIR)/$(am__dirstamp)
	-rm -f ../kernels/$(am__dirstamp)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ../kernels/$(DEPDIR) ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ../kernels/$(DEPDIR) ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic cscopelist-am ctags ctags-am \
	distclean distclean-compile distclean-generic distclean-tags \
	distdir dvi dvi-am html html-am info info-am install \
	install-am install-binPROGRAMS install-data install-data-am \
	install-dvi install-dvi-am install-exec install-exec-am \
	install-html install-html-am install-info install-info-am \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic pdf pdf-am \
	ps ps-am tags tags-am uninstall uninstall-am \
	uninstall-binPROGRAMS

.PRECIOUS: Makefile


help:
	@make -C .. help
buildbot:
	@make -C .. buildbot
cleanbin:
	@make -C .. cleanbin
cleandat:
	@make -C .. cleandat
cleanlib:
	@make -C .. cleanlib
cleanall:
	@make -C .. cleanall
revert:
	@make -C .. revert
save:
	@make -C .. save

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
